# src/shadow_calculator.py
import math
import pandas as pd
import pvlib
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import hydra
from omegaconf import DictConfig
from matplotlib.ticker import FuncFormatter


def calculate_shadow(tree_height: float, solar_altitude: float, solar_azimuth: float):
    if solar_altitude <= 0:
        return 0.0, 0.0
    alt_rad = math.radians(solar_altitude)
    length = tree_height / math.tan(alt_rad)
    direction = (solar_azimuth + 180) % 360
    return length, direction


def calc_ns_ew_pct(length: float, direction: float):
    if length <= 0:
        return 0.0, 0.0
    rad = math.radians(direction)
    ns = length * abs(math.sin(rad))
    ew = length * abs(math.cos(rad))
    return round((ns / length) * 100, 1), round((ew / length) * 100, 1)


def find_flight_windows(df: pd.DataFrame, column: str, threshold: float):
    mask = (df[column] <= threshold) & (df['Elevation'] > 0)
    periods = []
    start = None
    prev_t = None
    for t, ok in zip(df.index, mask):
        if ok and start is None:
            start = t
        if start is not None and ((not ok) or t == df.index[-1]):
            end = prev_t if not ok else t
            periods.append((start, end))
            start = None
        prev_t = t
    return periods


def shade_contiguous(ax, times, mask, color, alpha):
    start = None
    prev_t = None
    for t, flag in zip(times, mask):
        if flag and start is None:
            start = t
        if start is not None and ((not flag) or t == times[-1]):
            end = prev_t if not flag else t
            ax.axvspan(start, end, color=color, alpha=alpha)
            start = None
        prev_t = t


def format_time(x, pos=None):
    dt = mdates.num2date(x)
    return dt.strftime('%-I%p').lower()


@hydra.main(version_base=None, config_path="../config", config_name="config")
def main(cfg: DictConfig):
    # 1) Generate timestamps every 15 minutes
    times = pd.date_range(
        f"{cfg.date} 00:00", f"{cfg.date} 23:59", freq='15T', tz=cfg.timezone
    )

    # 2) Compute solar positions
    solpos = pvlib.solarposition.get_solarposition(
        times, cfg.latitude, cfg.longitude, altitude=cfg.elevation
    ).tz_convert(cfg.timezone)

    # 3) Compute shadow metrics
    lengths, dirs = zip(*solpos.apply(
        lambda r: calculate_shadow(cfg.tree_height, r['apparent_elevation'], r['azimuth']), axis=1
    ))
    ns_pct, ew_pct = zip(*[calc_ns_ew_pct(l, d) for l, d in zip(lengths, dirs)])

    # 4) Build DataFrame
    df = pd.DataFrame(
        index=times.tz_convert(cfg.timezone).tz_localize(None),
        data={
            'Elevation': solpos['apparent_elevation'].values,
            'NS Shadow (%)': ns_pct,
            'EW Shadow (%)': ew_pct
        }
    )

    # 5) Print HH:MM and metrics
    df_print = df.copy()
    df_print['Time'] = df_print.index.strftime('%H:%M')
    print(df_print[['Time', 'Elevation', 'NS Shadow (%)', 'EW Shadow (%)']].to_string(index=False))

    # 6) Peak sun time
    peak_time = df['Elevation'].idxmax()
    print(f"\nPeak sun at: {peak_time.strftime('%H:%M')} (Elevation: {df.at[peak_time, 'Elevation']:.1f}Â°)")

    # 7) Flight windows
    ns_windows = find_flight_windows(df, 'NS Shadow (%)', cfg.flight_window.max_ns_shadow_pct)
    ew_windows = find_flight_windows(df, 'EW Shadow (%)', cfg.flight_window.max_ew_shadow_pct)
    print("\nRecommended NS flight windows:")
    for s, e in ns_windows:
        print(f" - {s.strftime('%H:%M')} to {e.strftime('%H:%M')}")
    print("\nRecommended EW flight windows:")
    for s, e in ew_windows:
        print(f" - {s.strftime('%H:%M')} to {e.strftime('%H:%M')}")

    # 8) Plot settings
    major_locator = mdates.HourLocator(interval=1)
    minor_locator = mdates.MinuteLocator(byminute=[0])
    major_formatter = FuncFormatter(format_time)

    # Colors for lines
    ns_color = 'teal'
    ew_color = 'purple'

    # Font sizes
    title_font = 18
    label_font = 14
    tick_font = 12
    legend_font = 12

            # NS Shadow plot
    day_mask = df['Elevation'] >= 0
    fig, ax = plt.subplots(figsize=tuple(cfg.plot.figure_size))
    # plot only daytime percentages
    ax.plot(df.index[day_mask], df['NS Shadow (%)'][day_mask], color=ns_color, linewidth=2.5, label='NS Shadow (%)')
    # night shading
    shade_contiguous(ax, df.index, df['Elevation'] < 0, color='blue', alpha=0.4)
    # preferred low-shadow periods
    shade_contiguous(ax, df.index, df['NS Shadow (%)'] <= cfg.flight_window.preferred_ns_shadow_pct, color='gold', alpha=0.3)
    ax.axvline(peak_time, color='red', linewidth=4, label='Peak Sun')
    ax.set_title(cfg.plot.title, fontsize=title_font)
    ax.set_xlabel('Time', fontsize=label_font)
    ax.set_ylabel('NS Shadow (%)', fontsize=label_font)
    ax.xaxis.set_major_locator(major_locator)
    ax.xaxis.set_major_formatter(major_formatter)
    ax.xaxis.set_minor_locator(minor_locator)
    ax.tick_params(axis='y', labelsize=tick_font)
    ax.tick_params(axis='x', which='major', labelsize=tick_font)
    ax.grid(which='major', axis='x', linestyle='--', color='gray')
    ax.legend(loc='upper right', fontsize=legend_font)
    plt.tight_layout()
    plt.show()
    plt.show()

        # EW Shadow plot
    day_mask = df['Elevation'] >= 0
    fig, ax = plt.subplots(figsize=tuple(cfg.plot.figure_size))
    # plot only daytime percentages
    ax.plot(df.index[day_mask], df['EW Shadow (%)'][day_mask], color=ew_color, linewidth=2.5, label='EW Shadow (%)')
    # night shading
    shade_contiguous(ax, df.index, df['Elevation'] < 0, color='blue', alpha=0.4)
    # preferred low-shadow periods
    shade_contiguous(ax, df.index, df['EW Shadow (%)'] <= cfg.flight_window.preferred_ew_shadow_pct, color='gold', alpha=0.3)
    ax.axvline(peak_time, color='red', linewidth=4, label='Peak Sun')
    ax.set_title(cfg.plot.title, fontsize=title_font)
    ax.set_xlabel('Time', fontsize=label_font)
    ax.set_ylabel('EW Shadow (%)', fontsize=label_font)
    ax.xaxis.set_major_locator(major_locator)
    ax.xaxis.set_major_formatter(major_formatter)
    ax.xaxis.set_minor_locator(minor_locator)
    ax.tick_params(axis='y', labelsize=tick_font)
    ax.tick_params(axis='x', which='major', labelsize=tick_font)
    ax.grid(which='major', axis='x', linestyle='--', color='gray')
    ax.legend(loc='upper right', fontsize=legend_font)
    plt.tight_layout()
    plt.show()
    plt.show()

if __name__ == "__main__":
    main()
